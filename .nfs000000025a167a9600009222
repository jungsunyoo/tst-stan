// Code generated by stanc v2.37.0
#include <stan/model/model_header.hpp>
namespace rlddm_uncertainty_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 96> locations_array__ =
  {" (found before start of program)",
  " (in 'rlddm_uncertainty.stan', line 41, column 2 to column 31)",
  " (in 'rlddm_uncertainty.stan', line 42, column 2 to column 31)",
  " (in 'rlddm_uncertainty.stan', line 43, column 2 to column 45)",
  " (in 'rlddm_uncertainty.stan', line 44, column 2 to column 27)",
  " (in 'rlddm_uncertainty.stan', line 45, column 2 to column 23)",
  " (in 'rlddm_uncertainty.stan', line 48, column 2 to column 26)",
  " (in 'rlddm_uncertainty.stan', line 51, column 2 to column 11)",
  " (in 'rlddm_uncertainty.stan', line 52, column 2 to column 12)",
  " (in 'rlddm_uncertainty.stan', line 53, column 2 to column 12)",
  " (in 'rlddm_uncertainty.stan', line 54, column 2 to column 14)",
  " (in 'rlddm_uncertainty.stan', line 55, column 2 to column 14)",
  " (in 'rlddm_uncertainty.stan', line 58, column 2 to column 14)",
  " (in 'rlddm_uncertainty.stan', line 59, column 2 to column 15)",
  " (in 'rlddm_uncertainty.stan', line 63, column 2 to column 14)",
  " (in 'rlddm_uncertainty.stan', line 66, column 2 to column 16)",
  " (in 'rlddm_uncertainty.stan', line 67, column 2 to column 16)",
  " (in 'rlddm_uncertainty.stan', line 68, column 2 to column 17)",
  " (in 'rlddm_uncertainty.stan', line 70, column 2 to column 64)",
  " (in 'rlddm_uncertainty.stan', line 122, column 2 to column 19)",
  " (in 'rlddm_uncertainty.stan', line 64, column 17 to column 28)",
  " (in 'rlddm_uncertainty.stan', line 64, column 2 to column 28)",
  " (in 'rlddm_uncertainty.stan', line 73, column 4 to column 64)",
  " (in 'rlddm_uncertainty.stan', line 74, column 4 to column 64)",
  " (in 'rlddm_uncertainty.stan', line 75, column 4 to column 25)",
  " (in 'rlddm_uncertainty.stan', line 77, column 4 to column 28)",
  " (in 'rlddm_uncertainty.stan', line 78, column 4 to column 51)",
  " (in 'rlddm_uncertainty.stan', line 81, column 4 to line 89, column 37)",
  " (in 'rlddm_uncertainty.stan', line 91, column 4 to column 60)",
  " (in 'rlddm_uncertainty.stan', line 93, column 4 to column 57)",
  " (in 'rlddm_uncertainty.stan', line 72, column 17 to line 94, column 3)",
  " (in 'rlddm_uncertainty.stan', line 72, column 2 to line 94, column 3)",
  " (in 'rlddm_uncertainty.stan', line 124, column 4 to column 32)",
  " (in 'rlddm_uncertainty.stan', line 125, column 4 to column 19)",
  " (in 'rlddm_uncertainty.stan', line 126, column 4 to column 40)",
  " (in 'rlddm_uncertainty.stan', line 123, column 17 to line 127, column 3)",
  " (in 'rlddm_uncertainty.stan', line 123, column 2 to line 127, column 3)",
  " (in 'rlddm_uncertainty.stan', line 99, column 2 to column 26)",
  " (in 'rlddm_uncertainty.stan', line 100, column 2 to column 28)",
  " (in 'rlddm_uncertainty.stan', line 101, column 2 to column 30)",
  " (in 'rlddm_uncertainty.stan', line 102, column 2 to column 22)",
  " (in 'rlddm_uncertainty.stan', line 103, column 2 to column 29)",
  " (in 'rlddm_uncertainty.stan', line 105, column 2 to column 29)",
  " (in 'rlddm_uncertainty.stan', line 107, column 2 to column 24)",
  " (in 'rlddm_uncertainty.stan', line 108, column 2 to column 24)",
  " (in 'rlddm_uncertainty.stan', line 109, column 2 to column 24)",
  " (in 'rlddm_uncertainty.stan', line 110, column 2 to column 24)",
  " (in 'rlddm_uncertainty.stan', line 111, column 2 to column 24)",
  " (in 'rlddm_uncertainty.stan', line 112, column 2 to column 24)",
  " (in 'rlddm_uncertainty.stan', line 113, column 2 to column 24)",
  " (in 'rlddm_uncertainty.stan', line 116, column 4 to column 53)",
  " (in 'rlddm_uncertainty.stan', line 117, column 4 to column 61)",
  " (in 'rlddm_uncertainty.stan', line 115, column 17 to line 118, column 3)",
  " (in 'rlddm_uncertainty.stan', line 115, column 2 to line 118, column 3)",
  " (in 'rlddm_uncertainty.stan', line 8, column 2 to column 17)",
  " (in 'rlddm_uncertainty.stan', line 9, column 18 to column 19)",
  " (in 'rlddm_uncertainty.stan', line 9, column 2 to column 24)",
  " (in 'rlddm_uncertainty.stan', line 12, column 8 to column 9)",
  " (in 'rlddm_uncertainty.stan', line 12, column 2 to column 40)",
  " (in 'rlddm_uncertainty.stan', line 14, column 2 to column 17)",
  " (in 'rlddm_uncertainty.stan', line 15, column 8 to column 9)",
  " (in 'rlddm_uncertainty.stan', line 15, column 2 to column 37)",
  " (in 'rlddm_uncertainty.stan', line 16, column 8 to column 9)",
  " (in 'rlddm_uncertainty.stan', line 16, column 2 to column 37)",
  " (in 'rlddm_uncertainty.stan', line 17, column 8 to column 9)",
  " (in 'rlddm_uncertainty.stan', line 17, column 2 to column 36)",
  " (in 'rlddm_uncertainty.stan', line 18, column 8 to column 9)",
  " (in 'rlddm_uncertainty.stan', line 18, column 2 to column 41)",
  " (in 'rlddm_uncertainty.stan', line 19, column 27 to column 28)",
  " (in 'rlddm_uncertainty.stan', line 19, column 2 to column 37)",
  " (in 'rlddm_uncertainty.stan', line 21, column 2 to column 28)",
  " (in 'rlddm_uncertainty.stan', line 22, column 2 to column 25)",
  " (in 'rlddm_uncertainty.stan', line 25, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 25, column 2 to column 23)",
  " (in 'rlddm_uncertainty.stan', line 26, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 26, column 2 to column 15)",
  " (in 'rlddm_uncertainty.stan', line 27, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 27, column 2 to column 15)",
  " (in 'rlddm_uncertainty.stan', line 28, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 28, column 2 to column 29)",
  " (in 'rlddm_uncertainty.stan', line 29, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 29, column 2 to column 29)",
  " (in 'rlddm_uncertainty.stan', line 30, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 30, column 2 to column 25)",
  " (in 'rlddm_uncertainty.stan', line 33, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 33, column 2 to column 20)",
  " (in 'rlddm_uncertainty.stan', line 34, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 34, column 2 to column 21)",
  " (in 'rlddm_uncertainty.stan', line 36, column 2 to column 34)",
  " (in 'rlddm_uncertainty.stan', line 63, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 66, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 67, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 68, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 122, column 9 to column 10)",
  " (in 'rlddm_uncertainty.stan', line 3, column 4 to column 45)",
  " (in 'rlddm_uncertainty.stan', line 2, column 51 to line 4, column 3)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T2__>>>>* = nullptr>
stan::return_type_t<T0__, T1__, T2__>
logit_to_range(const T0__& x, const T1__& low, const T2__& high,
               std::ostream* pstream__);
// real logit_to_range(real, real, real)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T0__>>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T1__>>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<
                                                      std::decay_t<T2__>>>>*>
stan::return_type_t<T0__, T1__, T2__>
logit_to_range(const T0__& x, const T1__& low, const T2__& high,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::return_type_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 94;
    return (low + (stan::math::inv_logit(x) * (high - low)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class rlddm_uncertainty_model final : public model_base_crtp<rlddm_uncertainty_model> {
 private:
  int N;
  Eigen::Matrix<double,-1,1> rt_data__;
  std::vector<int> choice;
  int S;
  std::vector<int> mb1;
  std::vector<int> mb2;
  std::vector<int> s2;
  std::vector<int> choice2;
  Eigen::Matrix<double,-1,1> reward_data__;
  double rt_upper_t0;
  double t0_lower;
  Eigen::Matrix<double,-1,1> U_chosen_z_data__;
  Eigen::Matrix<double,-1,1> d1_data__;
  Eigen::Matrix<double,-1,1> d2_data__;
  Eigen::Matrix<double,-1,1> log1p_ship_lag_z_data__;
  Eigen::Matrix<double,-1,1> log1p_pair_lag_z_data__;
  Eigen::Matrix<double,-1,1> trial_scaled_data__;
  Eigen::Matrix<double,-1,1> U_val_z_data__;
  Eigen::Matrix<double,-1,1> U_menu_z_data__;
  double p_common;
  Eigen::Map<Eigen::Matrix<double,-1,1>> rt{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> reward{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> U_chosen_z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> d1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> d2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> log1p_ship_lag_z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> log1p_pair_lag_z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> trial_scaled{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> U_val_z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> U_menu_z{nullptr, 0};
 public:
  ~rlddm_uncertainty_model() {}
  rlddm_uncertainty_model(stan::io::var_context& context__, unsigned int
                          random_seed__ = 0, std::ostream*
                          pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "rlddm_uncertainty_model_namespace::rlddm_uncertainty_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 54;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 54;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "rt", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      rt_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&rt) Eigen::Map<Eigen::Matrix<double,-1,1>>(rt_data__.data(), N);
      {
        std::vector<local_scalar_t__> rt_flat__;
        current_statement__ = 56;
        rt_flat__ = context__.vals_r("rt");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(rt, rt_flat__[(pos__ - 1)],
            "assigning variable rt", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("choice", "N", N);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "choice", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      choice = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 58;
      choice = context__.vals_i("choice");
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "choice", choice, 0);
      current_statement__ = 58;
      stan::math::check_less_or_equal(function__, "choice", choice, 1);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 59;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "S", S, 1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("mb1", "N", N);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "mb1", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      mb1 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 61;
      mb1 = context__.vals_i("mb1");
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "mb1", mb1, 1);
      current_statement__ = 61;
      stan::math::check_less_or_equal(function__, "mb1", mb1, S);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("mb2", "N", N);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "mb2", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      mb2 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 63;
      mb2 = context__.vals_i("mb2");
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "mb2", mb2, 1);
      current_statement__ = 63;
      stan::math::check_less_or_equal(function__, "mb2", mb2, S);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("s2", "N", N);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "s2", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      s2 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 65;
      s2 = context__.vals_i("s2");
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "s2", s2, 1);
      current_statement__ = 65;
      stan::math::check_less_or_equal(function__, "s2", s2, S);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("choice2", "N", N);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "choice2", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      choice2 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 67;
      choice2 = context__.vals_i("choice2");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "choice2", choice2, 0);
      current_statement__ = 67;
      stan::math::check_less_or_equal(function__, "choice2", choice2, 1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("reward", "N", N);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "reward", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      reward_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&reward)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(reward_data__.data(), N);
      {
        std::vector<local_scalar_t__> reward_flat__;
        current_statement__ = 69;
        reward_flat__ = context__.vals_r("reward");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(reward, reward_flat__[(pos__ - 1)],
            "assigning variable reward", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "reward", reward, 0);
      current_statement__ = 69;
      stan::math::check_less_or_equal(function__, "reward", reward, 1);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "rt_upper_t0", "double",
        std::vector<size_t>{});
      rt_upper_t0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 70;
      rt_upper_t0 = context__.vals_r("rt_upper_t0")[(1 - 1)];
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "rt_upper_t0",
        rt_upper_t0, 0);
      current_statement__ = 71;
      context__.validate_dims("data initialization", "t0_lower", "double",
        std::vector<size_t>{});
      t0_lower = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 71;
      t0_lower = context__.vals_r("t0_lower")[(1 - 1)];
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "t0_lower", t0_lower, 0);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("U_chosen_z", "N", N);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "U_chosen_z", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      U_chosen_z_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                            std::numeric_limits<double>::quiet_NaN());
      new (&U_chosen_z)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(U_chosen_z_data__.data(), N);
      {
        std::vector<local_scalar_t__> U_chosen_z_flat__;
        current_statement__ = 73;
        U_chosen_z_flat__ = context__.vals_r("U_chosen_z");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(U_chosen_z, U_chosen_z_flat__[(pos__ - 1)],
            "assigning variable U_chosen_z", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 74;
      stan::math::validate_non_negative_index("d1", "N", N);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "d1", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      d1_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&d1) Eigen::Map<Eigen::Matrix<double,-1,1>>(d1_data__.data(), N);
      {
        std::vector<local_scalar_t__> d1_flat__;
        current_statement__ = 75;
        d1_flat__ = context__.vals_r("d1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(d1, d1_flat__[(pos__ - 1)],
            "assigning variable d1", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 76;
      stan::math::validate_non_negative_index("d2", "N", N);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "d2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      d2_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&d2) Eigen::Map<Eigen::Matrix<double,-1,1>>(d2_data__.data(), N);
      {
        std::vector<local_scalar_t__> d2_flat__;
        current_statement__ = 77;
        d2_flat__ = context__.vals_r("d2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(d2, d2_flat__[(pos__ - 1)],
            "assigning variable d2", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 78;
      stan::math::validate_non_negative_index("log1p_ship_lag_z", "N", N);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "log1p_ship_lag_z",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      log1p_ship_lag_z_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&log1p_ship_lag_z)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(log1p_ship_lag_z_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> log1p_ship_lag_z_flat__;
        current_statement__ = 79;
        log1p_ship_lag_z_flat__ = context__.vals_r("log1p_ship_lag_z");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(log1p_ship_lag_z,
            log1p_ship_lag_z_flat__[(pos__ - 1)],
            "assigning variable log1p_ship_lag_z",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 80;
      stan::math::validate_non_negative_index("log1p_pair_lag_z", "N", N);
      current_statement__ = 81;
      context__.validate_dims("data initialization", "log1p_pair_lag_z",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      log1p_pair_lag_z_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&log1p_pair_lag_z)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(log1p_pair_lag_z_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> log1p_pair_lag_z_flat__;
        current_statement__ = 81;
        log1p_pair_lag_z_flat__ = context__.vals_r("log1p_pair_lag_z");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(log1p_pair_lag_z,
            log1p_pair_lag_z_flat__[(pos__ - 1)],
            "assigning variable log1p_pair_lag_z",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 82;
      stan::math::validate_non_negative_index("trial_scaled", "N", N);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "trial_scaled",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      trial_scaled_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                              std::numeric_limits<double>::quiet_NaN());
      new (&trial_scaled)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(trial_scaled_data__.data(), N);
      {
        std::vector<local_scalar_t__> trial_scaled_flat__;
        current_statement__ = 83;
        trial_scaled_flat__ = context__.vals_r("trial_scaled");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(trial_scaled, trial_scaled_flat__[(pos__ - 1)],
            "assigning variable trial_scaled", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 84;
      stan::math::validate_non_negative_index("U_val_z", "N", N);
      current_statement__ = 85;
      context__.validate_dims("data initialization", "U_val_z", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      U_val_z_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&U_val_z)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(U_val_z_data__.data(), N);
      {
        std::vector<local_scalar_t__> U_val_z_flat__;
        current_statement__ = 85;
        U_val_z_flat__ = context__.vals_r("U_val_z");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(U_val_z, U_val_z_flat__[(pos__ - 1)],
            "assigning variable U_val_z", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 86;
      stan::math::validate_non_negative_index("U_menu_z", "N", N);
      current_statement__ = 87;
      context__.validate_dims("data initialization", "U_menu_z", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      U_menu_z_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                          std::numeric_limits<double>::quiet_NaN());
      new (&U_menu_z)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(U_menu_z_data__.data(), N);
      {
        std::vector<local_scalar_t__> U_menu_z_flat__;
        current_statement__ = 87;
        U_menu_z_flat__ = context__.vals_r("U_menu_z");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(U_menu_z, U_menu_z_flat__[(pos__ - 1)],
            "assigning variable U_menu_z", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 88;
      context__.validate_dims("data initialization", "p_common", "double",
        std::vector<size_t>{});
      p_common = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 88;
      p_common = context__.vals_r("p_common")[(1 - 1)];
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "p_common", p_common, 0);
      current_statement__ = 88;
      stan::math::check_less_or_equal(function__, "p_common", p_common, 1);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("V", "S", S);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("v_t", "N", N);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("a_t", "N", N);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("t0_t", "N", N);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("rt_rep", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "rlddm_uncertainty_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.37.0",
             "stancflags = --filename-in-msg=rlddm_uncertainty.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "rlddm_uncertainty_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto alpha =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 2;
      auto a =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0.2,
          3.5, lp__);
      current_statement__ = 3;
      auto t0 =
        in__.template read_constrain_lub<local_scalar_t__,
          jacobian__>(t0_lower, rt_upper_t0, lp__);
      current_statement__ = 4;
      auto w =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto scaler =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 6;
      auto k_decline =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto b_U = in__.template read<local_scalar_t__>();
      current_statement__ = 8;
      auto b_d1 = in__.template read<local_scalar_t__>();
      current_statement__ = 9;
      auto b_d2 = in__.template read<local_scalar_t__>();
      current_statement__ = 10;
      auto b_ship = in__.template read<local_scalar_t__>();
      current_statement__ = 11;
      auto b_pair = in__.template read<local_scalar_t__>();
      current_statement__ = 12;
      auto b_Uval = in__.template read<local_scalar_t__>();
      current_statement__ = 13;
      auto b_Umenu = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> V =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 21;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        stan::model::assign(V, 0.5, "assigning variable V",
          stan::model::index_uni(s));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> v_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> a_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> t0_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ eta0 = DUMMY_VAR__;
      current_statement__ = 18;
      eta0 = stan::math::logit(((t0 - t0_lower) / (rt_upper_t0 - t0_lower)));
      current_statement__ = 31;
      for (int t = 1; t <= N; ++t) {
        local_scalar_t__ qL = DUMMY_VAR__;
        current_statement__ = 22;
        qL = ((p_common *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb1, "mb1", stan::model::index_uni(t)))))
          + ((1 - p_common) *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb2, "mb2", stan::model::index_uni(t))))));
        local_scalar_t__ qR = DUMMY_VAR__;
        current_statement__ = 23;
        qR = ((p_common *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb2, "mb2", stan::model::index_uni(t)))))
          + ((1 - p_common) *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb1, "mb1", stan::model::index_uni(t))))));
        local_scalar_t__ qdiff = DUMMY_VAR__;
        current_statement__ = 24;
        qdiff = (qL - qR);
        current_statement__ = 25;
        stan::model::assign(v_t, (scaler * qdiff), "assigning variable v_t",
          stan::model::index_uni(t));
        current_statement__ = 26;
        stan::model::assign(a_t, (a *
          stan::math::exp((-(k_decline) *
            stan::model::rvalue(trial_scaled, "trial_scaled",
              stan::model::index_uni(t))))), "assigning variable a_t",
          stan::model::index_uni(t));
        local_scalar_t__ t0_lin = DUMMY_VAR__;
        current_statement__ = 27;
        t0_lin = (((((((eta0 + (b_U *
          stan::model::rvalue(U_chosen_z, "U_chosen_z",
            stan::model::index_uni(t))))
          + (b_Uval *
          stan::model::rvalue(U_val_z, "U_val_z", stan::model::index_uni(t))))
          + (b_Umenu *
          stan::model::rvalue(U_menu_z, "U_menu_z", stan::model::index_uni(t))))
          + (b_d1 *
          stan::model::rvalue(d1, "d1", stan::model::index_uni(t)))) + (b_d2
          * stan::model::rvalue(d2, "d2", stan::model::index_uni(t)))) +
          (b_ship *
          stan::model::rvalue(log1p_ship_lag_z, "log1p_ship_lag_z",
            stan::model::index_uni(t))))
          + (b_pair *
          stan::model::rvalue(log1p_pair_lag_z, "log1p_pair_lag_z",
            stan::model::index_uni(t))));
        current_statement__ = 28;
        stan::model::assign(t0_t,
          logit_to_range(t0_lin, t0_lower, rt_upper_t0, pstream__),
          "assigning variable t0_t", stan::model::index_uni(t));
        current_statement__ = 29;
        stan::model::assign(V,
          (stan::model::rvalue(V, "V",
             stan::model::index_uni(
               stan::model::rvalue(s2, "s2", stan::model::index_uni(t)))) +
          (alpha *
          (stan::model::rvalue(reward, "reward", stan::model::index_uni(t)) -
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(s2, "s2", stan::model::index_uni(t))))))),
          "assigning variable V",
          stan::model::index_uni(
            stan::model::rvalue(s2, "s2", stan::model::index_uni(t))));
      }
      {
        current_statement__ = 37;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(alpha, 1.5, 1.5));
        current_statement__ = 38;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a, 1.2, 0.5));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(t0, 0.30, 0.10));
        current_statement__ = 40;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(w, 2, 2));
        current_statement__ = 41;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(scaler, 0, 0.5));
        current_statement__ = 42;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(k_decline, 0, 0.5));
        current_statement__ = 43;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_U, 0, 1));
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_Uval, 0, 1));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_Umenu, 0, 1));
        current_statement__ = 46;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_d1, 0, 1));
        current_statement__ = 47;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_d2, 0, 1));
        current_statement__ = 48;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_ship, 0, 1));
        current_statement__ = 49;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_pair, 0, 1));
        current_statement__ = 53;
        for (int t = 1; t <= N; ++t) {
          local_scalar_t__ v_use = DUMMY_VAR__;
          current_statement__ = 50;
          v_use = (stan::math::logical_eq(
                     stan::model::rvalue(choice, "choice",
                       stan::model::index_uni(t)), 1) ? stan::model::rvalue(
                                                          v_t, "v_t",
                                                          stan::model::index_uni(
                                                            t)) : -(stan::model::rvalue(
                                                                    v_t,
                                                                    "v_t",
                                                                    stan::model::index_uni(
                                                                    t))));
          current_statement__ = 51;
          lp_accum__.add(stan::math::wiener_lpdf<false>(
                           stan::model::rvalue(rt, "rt",
                             stan::model::index_uni(t)),
                           stan::model::rvalue(a_t, "a_t",
                             stan::model::index_uni(t)),
                           stan::model::rvalue(t0_t, "t0_t",
                             stan::model::index_uni(t)), w, v_use));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "rlddm_uncertainty_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto alpha =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 2;
      auto a =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0.2,
          3.5, lp__);
      current_statement__ = 3;
      auto t0 =
        in__.template read_constrain_lub<local_scalar_t__,
          jacobian__>(t0_lower, rt_upper_t0, lp__);
      current_statement__ = 4;
      auto w =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto scaler =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 6;
      auto k_decline =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto b_U = in__.template read<local_scalar_t__>();
      current_statement__ = 8;
      auto b_d1 = in__.template read<local_scalar_t__>();
      current_statement__ = 9;
      auto b_d2 = in__.template read<local_scalar_t__>();
      current_statement__ = 10;
      auto b_ship = in__.template read<local_scalar_t__>();
      current_statement__ = 11;
      auto b_pair = in__.template read<local_scalar_t__>();
      current_statement__ = 12;
      auto b_Uval = in__.template read<local_scalar_t__>();
      current_statement__ = 13;
      auto b_Umenu = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> V =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 21;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        stan::model::assign(V, 0.5, "assigning variable V",
          stan::model::index_uni(s));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> v_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> a_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> t0_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ eta0 = DUMMY_VAR__;
      current_statement__ = 18;
      eta0 = stan::math::logit(((t0 - t0_lower) / (rt_upper_t0 - t0_lower)));
      current_statement__ = 31;
      for (int t = 1; t <= N; ++t) {
        local_scalar_t__ qL = DUMMY_VAR__;
        current_statement__ = 22;
        qL = ((p_common *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb1, "mb1", stan::model::index_uni(t)))))
          + ((1 - p_common) *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb2, "mb2", stan::model::index_uni(t))))));
        local_scalar_t__ qR = DUMMY_VAR__;
        current_statement__ = 23;
        qR = ((p_common *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb2, "mb2", stan::model::index_uni(t)))))
          + ((1 - p_common) *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb1, "mb1", stan::model::index_uni(t))))));
        local_scalar_t__ qdiff = DUMMY_VAR__;
        current_statement__ = 24;
        qdiff = (qL - qR);
        current_statement__ = 25;
        stan::model::assign(v_t, (scaler * qdiff), "assigning variable v_t",
          stan::model::index_uni(t));
        current_statement__ = 26;
        stan::model::assign(a_t, (a *
          stan::math::exp((-(k_decline) *
            stan::model::rvalue(trial_scaled, "trial_scaled",
              stan::model::index_uni(t))))), "assigning variable a_t",
          stan::model::index_uni(t));
        local_scalar_t__ t0_lin = DUMMY_VAR__;
        current_statement__ = 27;
        t0_lin = (((((((eta0 + (b_U *
          stan::model::rvalue(U_chosen_z, "U_chosen_z",
            stan::model::index_uni(t))))
          + (b_Uval *
          stan::model::rvalue(U_val_z, "U_val_z", stan::model::index_uni(t))))
          + (b_Umenu *
          stan::model::rvalue(U_menu_z, "U_menu_z", stan::model::index_uni(t))))
          + (b_d1 *
          stan::model::rvalue(d1, "d1", stan::model::index_uni(t)))) + (b_d2
          * stan::model::rvalue(d2, "d2", stan::model::index_uni(t)))) +
          (b_ship *
          stan::model::rvalue(log1p_ship_lag_z, "log1p_ship_lag_z",
            stan::model::index_uni(t))))
          + (b_pair *
          stan::model::rvalue(log1p_pair_lag_z, "log1p_pair_lag_z",
            stan::model::index_uni(t))));
        current_statement__ = 28;
        stan::model::assign(t0_t,
          logit_to_range(t0_lin, t0_lower, rt_upper_t0, pstream__),
          "assigning variable t0_t", stan::model::index_uni(t));
        current_statement__ = 29;
        stan::model::assign(V,
          (stan::model::rvalue(V, "V",
             stan::model::index_uni(
               stan::model::rvalue(s2, "s2", stan::model::index_uni(t)))) +
          (alpha *
          (stan::model::rvalue(reward, "reward", stan::model::index_uni(t)) -
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(s2, "s2", stan::model::index_uni(t))))))),
          "assigning variable V",
          stan::model::index_uni(
            stan::model::rvalue(s2, "s2", stan::model::index_uni(t))));
      }
      {
        current_statement__ = 37;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(alpha, 1.5, 1.5));
        current_statement__ = 38;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a, 1.2, 0.5));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(t0, 0.30, 0.10));
        current_statement__ = 40;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(w, 2, 2));
        current_statement__ = 41;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(scaler, 0, 0.5));
        current_statement__ = 42;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(k_decline, 0, 0.5));
        current_statement__ = 43;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_U, 0, 1));
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_Uval, 0, 1));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_Umenu, 0, 1));
        current_statement__ = 46;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_d1, 0, 1));
        current_statement__ = 47;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_d2, 0, 1));
        current_statement__ = 48;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_ship, 0, 1));
        current_statement__ = 49;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_pair, 0, 1));
        current_statement__ = 53;
        for (int t = 1; t <= N; ++t) {
          local_scalar_t__ v_use = DUMMY_VAR__;
          current_statement__ = 50;
          v_use = (stan::math::logical_eq(
                     stan::model::rvalue(choice, "choice",
                       stan::model::index_uni(t)), 1) ? stan::model::rvalue(
                                                          v_t, "v_t",
                                                          stan::model::index_uni(
                                                            t)) : -(stan::model::rvalue(
                                                                    v_t,
                                                                    "v_t",
                                                                    stan::model::index_uni(
                                                                    t))));
          current_statement__ = 51;
          lp_accum__.add(stan::math::wiener_lpdf<false>(
                           stan::model::rvalue(rt, "rt",
                             stan::model::index_uni(t)),
                           stan::model::rvalue(a_t, "a_t",
                             stan::model::index_uni(t)),
                           stan::model::rvalue(t0_t, "t0_t",
                             stan::model::index_uni(t)), w, v_use));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "rlddm_uncertainty_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto alpha =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 2;
      auto a =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0.2,
          3.5, lp__);
      current_statement__ = 3;
      auto t0 =
        in__.template read_constrain_lub<local_scalar_t__,
          jacobian__>(t0_lower, rt_upper_t0, lp__);
      current_statement__ = 4;
      auto w =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 5;
      auto scaler =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 6;
      auto k_decline =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 7;
      auto b_U = in__.template read<local_scalar_t__>();
      current_statement__ = 8;
      auto b_d1 = in__.template read<local_scalar_t__>();
      current_statement__ = 9;
      auto b_d2 = in__.template read<local_scalar_t__>();
      current_statement__ = 10;
      auto b_ship = in__.template read<local_scalar_t__>();
      current_statement__ = 11;
      auto b_pair = in__.template read<local_scalar_t__>();
      current_statement__ = 12;
      auto b_Uval = in__.template read<local_scalar_t__>();
      current_statement__ = 13;
      auto b_Umenu = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> V =
        Eigen::Matrix<double,-1,1>::Constant(S,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> v_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> a_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> t0_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double eta0 = std::numeric_limits<double>::quiet_NaN();
      out__.write(alpha);
      out__.write(a);
      out__.write(t0);
      out__.write(w);
      out__.write(scaler);
      out__.write(k_decline);
      out__.write(b_U);
      out__.write(b_d1);
      out__.write(b_d2);
      out__.write(b_ship);
      out__.write(b_pair);
      out__.write(b_Uval);
      out__.write(b_Umenu);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 21;
      for (int s = 1; s <= S; ++s) {
        current_statement__ = 20;
        stan::model::assign(V, 0.5, "assigning variable V",
          stan::model::index_uni(s));
      }
      current_statement__ = 18;
      eta0 = stan::math::logit(((t0 - t0_lower) / (rt_upper_t0 - t0_lower)));
      current_statement__ = 31;
      for (int t = 1; t <= N; ++t) {
        double qL = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 22;
        qL = ((p_common *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb1, "mb1", stan::model::index_uni(t)))))
          + ((1 - p_common) *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb2, "mb2", stan::model::index_uni(t))))));
        double qR = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 23;
        qR = ((p_common *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb2, "mb2", stan::model::index_uni(t)))))
          + ((1 - p_common) *
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(mb1, "mb1", stan::model::index_uni(t))))));
        double qdiff = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 24;
        qdiff = (qL - qR);
        current_statement__ = 25;
        stan::model::assign(v_t, (scaler * qdiff), "assigning variable v_t",
          stan::model::index_uni(t));
        current_statement__ = 26;
        stan::model::assign(a_t, (a *
          stan::math::exp((-(k_decline) *
            stan::model::rvalue(trial_scaled, "trial_scaled",
              stan::model::index_uni(t))))), "assigning variable a_t",
          stan::model::index_uni(t));
        double t0_lin = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 27;
        t0_lin = (((((((eta0 + (b_U *
          stan::model::rvalue(U_chosen_z, "U_chosen_z",
            stan::model::index_uni(t))))
          + (b_Uval *
          stan::model::rvalue(U_val_z, "U_val_z", stan::model::index_uni(t))))
          + (b_Umenu *
          stan::model::rvalue(U_menu_z, "U_menu_z", stan::model::index_uni(t))))
          + (b_d1 *
          stan::model::rvalue(d1, "d1", stan::model::index_uni(t)))) + (b_d2
          * stan::model::rvalue(d2, "d2", stan::model::index_uni(t)))) +
          (b_ship *
          stan::model::rvalue(log1p_ship_lag_z, "log1p_ship_lag_z",
            stan::model::index_uni(t))))
          + (b_pair *
          stan::model::rvalue(log1p_pair_lag_z, "log1p_pair_lag_z",
            stan::model::index_uni(t))));
        current_statement__ = 28;
        stan::model::assign(t0_t,
          logit_to_range(t0_lin, t0_lower, rt_upper_t0, pstream__),
          "assigning variable t0_t", stan::model::index_uni(t));
        current_statement__ = 29;
        stan::model::assign(V,
          (stan::model::rvalue(V, "V",
             stan::model::index_uni(
               stan::model::rvalue(s2, "s2", stan::model::index_uni(t)))) +
          (alpha *
          (stan::model::rvalue(reward, "reward", stan::model::index_uni(t)) -
          stan::model::rvalue(V, "V",
            stan::model::index_uni(
              stan::model::rvalue(s2, "s2", stan::model::index_uni(t))))))),
          "assigning variable V",
          stan::model::index_uni(
            stan::model::rvalue(s2, "s2", stan::model::index_uni(t))));
      }
      if (emit_transformed_parameters__) {
        out__.write(V);
        out__.write(v_t);
        out__.write(a_t);
        out__.write(t0_t);
        out__.write(eta0);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> rt_rep =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 36;
      for (int t = 1; t <= N; ++t) {
        double mu = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 32;
        mu = stan::math::log(
               (stan::model::rvalue(rt, "rt", stan::model::index_uni(t)) +
               1e-3));
        double sd = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 33;
        sd = 0.25;
        current_statement__ = 34;
        stan::model::assign(rt_rep,
          stan::math::exp(stan::math::normal_rng(mu, sd, base_rng__)),
          "assigning variable rt_rep", stan::model::index_uni(t));
      }
      out__.write(rt_rep);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, alpha);
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 2;
      a = in__.read<local_scalar_t__>();
      out__.write_free_lub(0.2, 3.5, a);
      local_scalar_t__ t0 = DUMMY_VAR__;
      current_statement__ = 3;
      t0 = in__.read<local_scalar_t__>();
      out__.write_free_lub(t0_lower, rt_upper_t0, t0);
      local_scalar_t__ w = DUMMY_VAR__;
      current_statement__ = 4;
      w = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, w);
      local_scalar_t__ scaler = DUMMY_VAR__;
      current_statement__ = 5;
      scaler = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, scaler);
      local_scalar_t__ k_decline = DUMMY_VAR__;
      current_statement__ = 6;
      k_decline = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, k_decline);
      local_scalar_t__ b_U = DUMMY_VAR__;
      current_statement__ = 7;
      b_U = in__.read<local_scalar_t__>();
      out__.write(b_U);
      local_scalar_t__ b_d1 = DUMMY_VAR__;
      current_statement__ = 8;
      b_d1 = in__.read<local_scalar_t__>();
      out__.write(b_d1);
      local_scalar_t__ b_d2 = DUMMY_VAR__;
      current_statement__ = 9;
      b_d2 = in__.read<local_scalar_t__>();
      out__.write(b_d2);
      local_scalar_t__ b_ship = DUMMY_VAR__;
      current_statement__ = 10;
      b_ship = in__.read<local_scalar_t__>();
      out__.write(b_ship);
      local_scalar_t__ b_pair = DUMMY_VAR__;
      current_statement__ = 11;
      b_pair = in__.read<local_scalar_t__>();
      out__.write(b_pair);
      local_scalar_t__ b_Uval = DUMMY_VAR__;
      current_statement__ = 12;
      b_Uval = in__.read<local_scalar_t__>();
      out__.write(b_Uval);
      local_scalar_t__ b_Umenu = DUMMY_VAR__;
      current_statement__ = 13;
      b_Umenu = in__.read<local_scalar_t__>();
      out__.write(b_Umenu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "a", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "t0", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "w", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "scaler", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "k_decline",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "b_U", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "b_d1", "double",
        std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "b_d2", "double",
        std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "b_ship", "double",
        std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "b_pair", "double",
        std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "b_Uval", "double",
        std::vector<size_t>{});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "b_Umenu",
        "double", std::vector<size_t>{});
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write_free_lub(0, 1, alpha);
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 2;
      a = context__.vals_r("a")[(1 - 1)];
      out__.write_free_lub(0.2, 3.5, a);
      local_scalar_t__ t0 = DUMMY_VAR__;
      current_statement__ = 3;
      t0 = context__.vals_r("t0")[(1 - 1)];
      out__.write_free_lub(t0_lower, rt_upper_t0, t0);
      local_scalar_t__ w = DUMMY_VAR__;
      current_statement__ = 4;
      w = context__.vals_r("w")[(1 - 1)];
      out__.write_free_lub(0, 1, w);
      local_scalar_t__ scaler = DUMMY_VAR__;
      current_statement__ = 5;
      scaler = context__.vals_r("scaler")[(1 - 1)];
      out__.write_free_lb(0, scaler);
      local_scalar_t__ k_decline = DUMMY_VAR__;
      current_statement__ = 6;
      k_decline = context__.vals_r("k_decline")[(1 - 1)];
      out__.write_free_lb(0, k_decline);
      local_scalar_t__ b_U = DUMMY_VAR__;
      current_statement__ = 7;
      b_U = context__.vals_r("b_U")[(1 - 1)];
      out__.write(b_U);
      local_scalar_t__ b_d1 = DUMMY_VAR__;
      current_statement__ = 8;
      b_d1 = context__.vals_r("b_d1")[(1 - 1)];
      out__.write(b_d1);
      local_scalar_t__ b_d2 = DUMMY_VAR__;
      current_statement__ = 9;
      b_d2 = context__.vals_r("b_d2")[(1 - 1)];
      out__.write(b_d2);
      local_scalar_t__ b_ship = DUMMY_VAR__;
      current_statement__ = 10;
      b_ship = context__.vals_r("b_ship")[(1 - 1)];
      out__.write(b_ship);
      local_scalar_t__ b_pair = DUMMY_VAR__;
      current_statement__ = 11;
      b_pair = context__.vals_r("b_pair")[(1 - 1)];
      out__.write(b_pair);
      local_scalar_t__ b_Uval = DUMMY_VAR__;
      current_statement__ = 12;
      b_Uval = context__.vals_r("b_Uval")[(1 - 1)];
      out__.write(b_Uval);
      local_scalar_t__ b_Umenu = DUMMY_VAR__;
      current_statement__ = 13;
      b_Umenu = context__.vals_r("b_Umenu")[(1 - 1)];
      out__.write(b_Umenu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha", "a", "t0", "w", "scaler",
                "k_decline", "b_U", "b_d1", "b_d2", "b_ship", "b_pair",
                "b_Uval", "b_Umenu"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"V", "v_t", "a_t", "t0_t", "eta0"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"rt_rep"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(S)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "t0");
    param_names__.emplace_back(std::string() + "w");
    param_names__.emplace_back(std::string() + "scaler");
    param_names__.emplace_back(std::string() + "k_decline");
    param_names__.emplace_back(std::string() + "b_U");
    param_names__.emplace_back(std::string() + "b_d1");
    param_names__.emplace_back(std::string() + "b_d2");
    param_names__.emplace_back(std::string() + "b_ship");
    param_names__.emplace_back(std::string() + "b_pair");
    param_names__.emplace_back(std::string() + "b_Uval");
    param_names__.emplace_back(std::string() + "b_Umenu");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        param_names__.emplace_back(std::string() + "V" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "v_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "a_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "t0_t" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "eta0");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "rt_rep" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "t0");
    param_names__.emplace_back(std::string() + "w");
    param_names__.emplace_back(std::string() + "scaler");
    param_names__.emplace_back(std::string() + "k_decline");
    param_names__.emplace_back(std::string() + "b_U");
    param_names__.emplace_back(std::string() + "b_d1");
    param_names__.emplace_back(std::string() + "b_d2");
    param_names__.emplace_back(std::string() + "b_ship");
    param_names__.emplace_back(std::string() + "b_pair");
    param_names__.emplace_back(std::string() + "b_Uval");
    param_names__.emplace_back(std::string() + "b_Umenu");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        param_names__.emplace_back(std::string() + "V" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "v_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "a_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "t0_t" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "eta0");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "rt_rep" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"t0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scaler\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k_decline\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_U\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_d1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_d2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_ship\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_pair\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_Uval\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_Umenu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"v_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"a_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"t0_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rt_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"t0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scaler\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k_decline\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_U\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_d1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_d2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_ship\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_pair\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_Uval\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_Umenu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"v_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"a_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"t0_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rt_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) +
      1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((S + N)
      + N) + N) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) +
      1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((S + N)
      + N) + N) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = rlddm_uncertainty_model_namespace::rlddm_uncertainty_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return rlddm_uncertainty_model_namespace::profiles__;
}
#endif